name: Build and test
on: [push, pull_request]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  linux:
    runs-on: ubuntu-20.04
    container: seladb/${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: ubuntu2204
            python: python3
          - image: ubuntu2004
            python: python3
          - image: ubuntu1804
            python: python3.8
          - image: centos7
            python: python3.8
            test-flags: --test-args="-s"
          - image: fedora34
            python: python3
          - image: alpine315
            python: python3
            configure: --musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure PcapPlusPlus
        run: ./configure-linux.sh --default ${{ matrix.configure }}

      - name: Build PcapPlusPlus
        run: make all

      - name: Test PcapPlusPlus
        run: |
          ${{ matrix.python }} -m pip install -U pip
          ${{ matrix.python }} -m pip install -r ci/run_tests/requirements.txt
          ${{ matrix.python }} ci/run_tests/run_tests.py --interface eth0 ${{ matrix.test-flags }}

      - name: Test Examples
        run: |
          cd Tests/ExamplesTest
          ${{ matrix.python }} -m pip install -U pip
          ${{ matrix.python }} -m pip install -r requirements.txt
          ${{ matrix.python }} -m pytest --interface eth0

      - name: Check installation
        run: |
          make install

      - name: Build Tutorials
        run: |
          cd Examples/Tutorials/Tutorial-HelloWorld
          make -f Makefile.non_windows all
          ./Tutorial-HelloWorld

  dpdk-legacy:
    runs-on: ubuntu-20.04
    container: seladb/ubuntu2004-dpdk1811

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure PcapPlusPlus
        run: ./configure-linux.sh --dpdk --dpdk-home /dpdk

      - name: Build PcapPlusPlus
        run: make all

      - name: Test Packet++
        run: |
          cd Tests/Packet++Test
          Bin/Packet++Test

      - name: Test Pcap++
        run: |
          cd Tests/Pcap++Test
          Bin/Pcap++Test -n

  dpdk:
    runs-on: ubuntu-20.04
    container: seladb/${{ matrix.image }}
    strategy:
      matrix:
        image: [ubuntu2004-dpdk2111, ubuntu2004-dpdk2011, ubuntu2004-dpdk1911]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure PcapPlusPlus
        run: ./configure-linux.sh --dpdk --dpdk-home /dpdk

      - name: Build PcapPlusPlus
        run: make all

      - name: Check AVX
        run: grep avx /proc/cpuinfo

      - name: Test Packet++
        run: |
          cd Tests/Packet++Test
          if [ -n "$(grep avx512 /proc/cpuinfo)" ]; then Bin/Packet++Test; else echo AVX-512 SUPPORT NOT FOUND, CANNOT RUN Packet++Test; fi

      - name: Test Pcap++
        run: |
          cd Tests/Pcap++Test
          if [ -n "$(grep avx512 /proc/cpuinfo)" ]; then Bin/Pcap++Test -n; else echo AVX-512 SUPPORT NOT FOUND, CANNOT RUN Pcap++Test; fi

  pfring:
    runs-on: ubuntu-20.04
    container: seladb/ubuntu2004-pfring

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure PcapPlusPlus
        run: ./configure-linux.sh --pf-ring --pf-ring-home /PF_RING

      - name: Build PcapPlusPlus
        run: make all

      - name: Test Packet++
        run: |
          cd Tests/Packet++Test
          Bin/Packet++Test

      - name: Test Pcap++
        run: |
          cd Tests/Pcap++Test
          Bin/Pcap++Test -n

  macos:
    runs-on: ${{ matrix.os-version }}
    strategy:
      matrix:
        os-version: [macos-11, macos-12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Configure PcapPlusPlus
        run: ./configure-mac_os_x.sh

      - name: Build PcapPlusPlus
        run: make all

      - name: Install Tcpreplay
        run: brew install tcpreplay

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -U pip
          python -m pip install -r ci/run_tests/requirements.txt
          python ci/run_tests/run_tests.py --interface en0 --use-sudo

      - name: Test Examples
        run: |
          cd Tests/ExamplesTest
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pytest --interface en0 --use-sudo

      - name: Check installation
        run: |
          make install

      - name: Build Tutorials
        run: |
          cd Examples/Tutorials/Tutorial-HelloWorld
          make -f Makefile.non_windows all
          ./Tutorial-HelloWorld

  macos-apple-silicon-arm64:
    runs-on: ${{ matrix.os-version }}
    strategy:
      matrix:
        os-version: [macos-11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Configure PcapPlusPlus
        run: ./configure-mac_os_x.sh --arm64

      - name: Build PcapPlusPlus
        run: make all

      - name: Check for arm64 slice in executables
        run: |
          cd Dist && ALL_EXECUTABLES_WITHOUT_SYMLINKS=($(find . -perm +111 -type f)) && for EXECUTABLE in ${ALL_EXECUTABLES_WITHOUT_SYMLINKS[@]}; do echo "Checking for arm64 in $EXECUTABLE"; CHECK_ARCH=$(lipo $EXECUTABLE -verify_arch arm64 2>&1); RETVAL=$?; if [ $RETVAL -eq 1 ]; then echo "Couldn't find arm64 slice in $EXECUTABLE"; exit 1; else echo "Found arm64 slice in $EXECUTABLE"; fi; done

      - name: Check for arm64 slice in libraries
        run: |
          cd Dist && ALL_LIBRARIES_WITHOUT_SYMLINKS=($(find . -name "*.a" -type f)) &&  for LIBRARY in ${ALL_LIBRARIES_WITHOUT_SYMLINKS[@]}; do echo "Checking for arm64 in $LIBRARY"; CHECK_ARCH=$(lipo $LIBRARY -verify_arch arm64 2>&1); RETVAL=$?; if [ $RETVAL -eq 1 ]; then echo "Couldn't find arm64 slice in $LIBRARY"; exit 1; else echo "Found arm64 slice in $LIBRARY"; fi; done

  mingw-w64:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - env: i686
            sys: mingw32
          - env: x86_64
            sys: mingw64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: mingw-w64-${{matrix.env}}-gcc mingw-w64-${{matrix.env}}-make

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=/C/Npcap-sdk" >> $env:GITHUB_ENV

      - name: Configure PcapPlusPlus
        shell: msys2 {0}
        run: ./configure-windows-mingw.bat -m /${{ matrix.sys }} -w ${{ env.PCAP_SDK_DIR }} -s .

      - name: Build PcapPlusPlus
        shell: msys2 {0}
        run: mingw32-make all

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py

      - name: Test Examples
        run: |
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest

  visual-studio:
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          - vs-version: vs2019
            platform: x64
            config: Debug
          - vs-version: vs2019
            platform: x64
            config: Release
            use_zstd: true
          - vs-version: vs2019
            platform: x86
            config: Debug
          - vs-version: vs2019
            platform: x86
            config: Release
            pcap_lib: npcap

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Install WinPcap
        run: |
          ci\install_winpcap.bat
          echo "PCAP_SDK_DIR=C:\WpdPack" >> $env:GITHUB_ENV
        if: matrix.pcap_lib != 'npcap'

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=C:\Npcap-sdk" >> $env:GITHUB_ENV
        if: matrix.pcap_lib == 'npcap'

      - name: Set Zstd
        run: |
          ci\install_zstd.bat
          echo "ZSTD_HOME_PARAM=-z C:\zstd" >> $env:GITHUB_ENV
        if: matrix.use_zstd == true

      - name: Configure PcapPlusPlus
        run: ./configure-windows-visual-studio.bat -v ${{matrix.vs-version}} -w ${{ env.PCAP_SDK_DIR }} ${{ env.ZSTD_HOME_PARAM }}

      - name: Build PcapPlusPlus
        run: msbuild /m mk\${{matrix.vs-version}}\PcapPlusPlus.sln /p:Configuration=${{matrix.config}} /p:Platform=${{matrix.platform}}

      - name: Build Examples
        run: msbuild /m mk\${{matrix.vs-version}}\PcapPlusPlus-Examples.sln /p:Configuration=${{matrix.config}} /p:Platform=${{matrix.platform}}

      - name: Build Tutorials
        run: msbuild /m mk\${{matrix.vs-version}}\Tutorials.sln /p:Configuration=${{matrix.config}} /p:Platform=${{matrix.platform}}

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py

      - name: Test Examples
        run: |
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest

  android:
    strategy:
      matrix:
        include:
          - run-on-os: ubuntu-20.04
            target: armeabi-v7a
            api-version: 30
          - run-on-os: ubuntu-20.04
            target: x86
            api-version: 30
          - run-on-os: macos-11
            target: arm64-v8a
            api-version: 30
          - run-on-os: macos-11
            target: x86_64
            api-version: 30

    runs-on: ${{ matrix.run-on-os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkout lipbcap for Android
        uses: actions/checkout@main
        with:
          repository: seladb/libpcap-android
          path: ./libpcap-android

      - name: Configure PcapPlusPlus
        run: |
          NDK_ROOT=$(ls -dr ${ANDROID_SDK_ROOT}/ndk/*/ | head -1)
          LIBPCAP_PATH=$(pwd)/libpcap-android
          ./configure-android.sh --ndk-path $NDK_ROOT --target ${{ matrix.target }} --api ${{ matrix.api-version }} --libpcap-include-dir $LIBPCAP_PATH/include --libpcap-lib-dir $LIBPCAP_PATH/${{ matrix.target }}/${{ matrix.api-version }}

      - name: Build PcapPlusPlus
        run: make all

      - name: Checkout ToyVpn-PcapPlusPlus
        uses: actions/checkout@master
        with:
          repository: seladb/ToyVpn-PcapPlusPlus
          path: ./ToyVpn-PcapPlusPlus
          submodules: true

      - name: Copy PcapPlusPlus libs to ToyVpn-PcapPlusPlus
        run: |
          TOYVPN_LIBS=./ToyVpn-PcapPlusPlus/app/libs
          PCAPPLUSPLUS_LIBS_PATH=$TOYVPN_LIBS/pcapplusplus/${{ matrix.target }}/${{ matrix.api-version }}
          PCAPPLUSPLUS_INCLUDE_PATH=$TOYVPN_LIBS/pcapplusplus/include
          mkdir -p $PCAPPLUSPLUS_LIBS_PATH
          mkdir -p $PCAPPLUSPLUS_INCLUDE_PATH
          cp Dist/*.a $PCAPPLUSPLUS_LIBS_PATH/
          cp -R Dist/header/* $PCAPPLUSPLUS_INCLUDE_PATH/

      - name: Build ToyVpn-PcapPlusPlus
        working-directory: ./ToyVpn-PcapPlusPlus
        run: |
          sed -i.bak "s|abiFilters.*$|abiFilters '${{ matrix.target }}'|g" app/build.gradle
          chmod +x gradlew
          ./gradlew assembleDebug
