name: Build and test
on:
  push:
    branches: ["master", "dev"]
  pull_request:
    branches: ["dev"]
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight

env:
  BUILD_DIR: Dist
  GCOVR_FLAGS: --gcov-ignore-parse-errors --exclude-throw-branches --filter Common --filter Pcap --filter Packet --xml

permissions:
  contents: read

jobs:

  mingw-w64:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - env: i686
            sys: mingw32
          - env: x86_64
            sys: mingw64

    steps:
      - name: Checkout code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Setup MSYS2
        uses: msys2/setup-msys2@d0e80f58dffbc64f6a3a1f43527d469b4fc7b6c8 # v2.23.0
        with:
          msystem: ${{matrix.sys}}
          install: >-
            git
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-gcc
            mingw-w64-${{matrix.env}}-make

      - name: Setup Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: "3.8.x"

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=/C/Npcap-sdk" >> $env:GITHUB_ENV

      - name: Configure PcapPlusPlus
        shell: msys2 {0}
        run: |
          cmake -G "MinGW Makefiles" -DPCAP_ROOT=/C/Npcap-sdk -DLIGHT_PCAPNG_ZSTD=OFF -DPCAPPP_BUILD_COVERAGE=ON -S . -B "$BUILD_DIR"

      - name: Build PcapPlusPlus
        shell: msys2 {0}
        # More than 2 jobs would make the build crash with OOM
        # cc1plus.exe: out of memory allocating 65536 bytes
        run: cmake --build "$BUILD_DIR" -j 2

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py

      - name: Test Examples
        run: |
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest --root-path=../../Dist/examples_bin

      - name: Install Coverage Requirements
        run: python3 -m pip install gcovr

      - name: Process Coverage Files
        shell: msys2 {0}
        run: find . -name "*.gcno" -exec gcov -b -l -p -c {} +

      - name: Create Coberture Report
        run: gcovr -v -g -k -r . $env:GCOVR_FLAGS.split() -o coverage.xml

      - name: Upload Coverage Results
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3.1.6
        with:
          files: ./coverage.xml
          flags: ${{ matrix.sys }},unittest
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  visual-studio:
    strategy:
      matrix:
        include:
          - os: "windows-2019"
            platform: "Visual Studio 16 2019"
            arch: "x64"
            pcap_lib: "npcap"
          - os: windows-2019
            platform: "Visual Studio 16 2019"
            arch: Win32
            pcap_lib: "winpcap"
          - os: windows-2022
            platform: "Visual Studio 17 2022"
            arch: "x64"
            pcap_lib: "winpcap"
          - os: windows-2022
            platform: "Visual Studio 17 2022"
            arch: "x64"
            pcap_lib: "npcap"

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: "3.8.x"

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

      - name: Setup OpenCppCoverage and add to PATH
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Install WinPcap
        run: |
          ci\install_winpcap.bat
          echo "PCAP_SDK_DIR=C:\WpdPack" >> $env:GITHUB_ENV
        if: matrix.pcap_lib == 'winpcap'

      - name: Install NPcap
        env:
          NPCAP_USERNAME: ${{ secrets.NPCAP_USERNAME }}
          NPCAP_PASSWORD: ${{ secrets.NPCAP_PASSWORD }}
        run: |
          ci\install_npcap.bat
          echo "PCAP_SDK_DIR=C:\Npcap-sdk" >> $env:GITHUB_ENV
        if: matrix.pcap_lib == 'npcap'

      - name: Set Zstd
        run: |
          ci\install_zstd.bat
          echo "ZSTD_HOME_PARAM=-z C:\zstd" >> $env:GITHUB_ENV
        if: matrix.use_zstd == true

      - name: Configure PcapPlusPlus
        run: cmake -A ${{ matrix.arch }} -G "${{ matrix.platform }}" -DPCAP_ROOT=${{ env.PCAP_SDK_DIR }} -S . -B "$env:BUILD_DIR"

      - name: Build PcapPlusPlus
        run: cmake --build $env:BUILD_DIR -j

      - name: Install tcpreplay
        run: ci\install_tcpreplay.bat

      - name: Test PcapPlusPlus
        run: |
          python -m pip install -r ci\run_tests\requirements.txt
          python ci\run_tests\run_tests_windows.py --coverage

      - name: Test Examples
        run: |
          move ".\Dist\examples_bin\Debug\*" ".\Dist\examples_bin\"
          cd Tests\ExamplesTest
          python -m pip install -r requirements.txt
          python -m pytest --root-path=../../Dist/examples_bin

      - name: Upload Coverage Results
        uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3.1.6
        with:
          files: ./Tests/Pcap++Test/Pcap++Coverage.xml,./Tests/Packet++Test/Packet++Coverage.xml
          flags: ${{ matrix.os }},unittest,${{ matrix.pcap_lib }}
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test_regressions:
    name: Run ${{ matrix.engine }}-${{ matrix.sanitizer }} fuzzer for regressions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        sanitizer: [address, undefined, memory]
        engine: [libfuzzer]
    container:
      image: gcr.io/oss-fuzz-base/base-builder
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Install prerequisites
        run: |
          apt-get update && apt-get install -y cmake autoconf flex bison
          cd ..
          cp -r PcapPlusPlus/ $SRC/PcapPlusPlus
          git clone --depth=1 https://github.com/the-tcpdump-group/libpcap.git $SRC/libpcap
          cd $SRC/PcapPlusPlus/
      - name: Compile fuzzer
        run: |
          export FUZZING_LANGUAGE=c
          export ARCHITECTURE=x86_64
          export FUZZING_ENGINE=${{ matrix.engine }}
          export SANITIZER=${{ matrix.sanitizer }}
          $SRC/PcapPlusPlus/Tests/Fuzzers/ossfuzz.sh
      - name: Check for regressions
        run: |
          export BINARY="$OUT/FuzzTarget"
          export SAMPLES="Tests/Fuzzers/RegressionTests/regression_samples"
          Tests/Fuzzers/RegressionTests/run_tests.sh
